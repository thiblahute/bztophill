#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""Import all users defined in a Bugzilla XML file in phabricator
with the Phabricator add_user.php script.

This script should be used before using Phabricator's Phill unless
you are sure all users already exist.

Usage:
  bzuserstophab <bz.xml> <admin-username> [-o=outdir -r=phabricator_rootdir]

Options:
  -o=outfiles_dir              Were to put generated/downloaded files
  -r=phabricator_rootdir       Were to put generated/downloaded files
  -h --help                    Show this screen.
  --version                    Show version.
"""

import xml.etree.ElementTree as ET
from docopt import docopt
import os
import json

class User:
    def __init__(self, email, realname=None):
        self.email = email
        self.username = email.split("@")[0].replace("+", "_")
        if not realname:
            self._realname = self.username
        else:
            self._realname = realname

    @property
    def realname(self):
        return self._realname

    @realname.setter
    def realname(self, realname):
        if not realname:
            return

        self._realname = realname.replace('"', "'")

    def __repr__(self):
        return "Email: %s Username: %s, realname: %s" % (self.email, self.username, self.realname)


class Importer:
    def __init__(self, outfiles_dir, phab_root):
        self.root = None
        self.users = {}
        self.outfiles_dir = outfiles_dir
        self.phab_root = phab_root

    def load(self, filename):
        self.file = filename
        self.root = ET.parse(filename).getroot()

    def add_user(self, user):
        if user.email in self.users:
            return

        self.users[user.email] = user

    def import_mails(self, adminame):
        if not os.environ.get("PHABRICATOR_ROOT"):
            if not self.phab_root:
                raise RuntimeError("You need to set phabricator root directory environment variable to run this script"
                                   " (either through the PHABRICATOR_ROOT environment variable or the -r=phabricator_rootdir option).")
            os.environ["PHABRICATOR_ROOT"] = self.phab_root

        script = os.path.join(os.path.dirname(__file__), "add_user.php")
        for bug in self.root.findall('bug'):
            for cc in bug.findall("cc"):
                if cc.text not in self.users:
                    self.add_user(User(cc.text))

            for attacher in bug.findall("attachment/attacher"):
                self.add_user(User(attacher.text, attacher.attrib.get("name")))

                self.users[attacher.text].realname = attacher.attrib.get("name")

            for commenter in bug.findall("long_desc/who"):
                self.add_user(User(commenter.text, commenter.attrib.get("name")))

                self.users[commenter.text].realname = commenter.attrib.get("name")

            reporter = bug.find("reporter")
            self.add_user(User(reporter.text, reporter.attrib.get("name")))
            self.users[reporter.text].realname = reporter.attrib.get("name")

            assignee = bug.find("assigned_to")
            if assignee.text not in self.users:
                self.add_user(User(assignee.text, assignee.attrib.get("name")))
            self.users[assignee.text].realname = assignee.attrib.get("name")

            creator = bug.find("creator")
            if creator and creator.text not in self.users:
                self.add_user(User(creator.text, creator.attrib.get("name")))

        try:
            os.mkdir(os.path.join(self.outfiles_dir, "adding_users_logs"))
        except FileExistsError:
            pass

        failures = open("%s/%s_add_users.failure" % (self.outfiles_dir, os.path.splitext(os.path.basename(self.file))[0]), "w", encoding="utf-8-sig")
        imported_user_fpath = os.path.join(self.outfiles_dir, "imported_users.json")
        try:
            print("Loading %s" % imported_user_fpath)
            success_file = open(imported_user_fpath, "r", encoding='utf-8-sig')
            success = json.load(success_file)
            success_file.close()
        except FileNotFoundError as e:
            print("No imported users yes: %s" % e)
            success = {}

        for user in self.users.values():
            log = os.path.join(self.outfiles_dir, "adding_users_logs", "add_%s" % user.email)

            command = '%s "%s" "%s" "%s" "%s" > %s 2>&1' % (script, user.username, user.email, user.realname, adminame, log)
            if os.system(command) == 0:
                success[user.email] = {"username": user.username, "realname": user.realname}
            else:
                failures.write("\n\n==== \nCould not add %s:\n" % user)
                try:
                    failures.write(open(log, "r").read())
                except FileNotFoundError:
                    failures.write("CHECKME! No log generated\nCommand: $ %s" % command)
                    print("CHECKME! No log generated\nCommand: $ %s" % command)

        open(imported_user_fpath, "wt", encoding="utf-8-sig").write(json.dumps(success, sort_keys=True, indent=4, ensure_ascii=False))

def main(arguments):
    filename = arguments['<bz.xml>']
    outfiles_dir = arguments.get('-o', "outfiles")
    if not outfiles_dir:
        outfiles_dir = "outfiles"

    phab_root = arguments.get('-r', None)
    try:
        os.mkdir(outfiles_dir)
    except FileExistsError:
        pass

    importer = Importer(outfiles_dir, phab_root)
    importer.load(filename)
    importer.import_mails(arguments['<admin-username>'])

if __name__ == '__main__':
    arguments = docopt(__doc__, version='bzuserstophab 0.1')
    main(arguments)
